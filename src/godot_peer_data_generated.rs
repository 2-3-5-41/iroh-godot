// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum MultiplayerDataPacketOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct MultiplayerDataPacket<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for MultiplayerDataPacket<'a> {
  type Inner = MultiplayerDataPacket<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> MultiplayerDataPacket<'a> {
  pub const VT_SENDER: flatbuffers::VOffsetT = 4;
  pub const VT_PACKET: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    MultiplayerDataPacket { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args MultiplayerDataPacketArgs<'args>
  ) -> flatbuffers::WIPOffset<MultiplayerDataPacket<'bldr>> {
    let mut builder = MultiplayerDataPacketBuilder::new(_fbb);
    if let Some(x) = args.packet { builder.add_packet(x); }
    builder.add_sender(args.sender);
    builder.finish()
  }


  #[inline]
  pub fn sender(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MultiplayerDataPacket::VT_SENDER, Some(0)).unwrap()}
  }
  #[inline]
  pub fn packet(&self) -> flatbuffers::Vector<'a, u8> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(MultiplayerDataPacket::VT_PACKET, None).unwrap()}
  }
}

impl flatbuffers::Verifiable for MultiplayerDataPacket<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i32>("sender", Self::VT_SENDER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>("packet", Self::VT_PACKET, true)?
     .finish();
    Ok(())
  }
}
pub struct MultiplayerDataPacketArgs<'a> {
    pub sender: i32,
    pub packet: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
}
impl<'a> Default for MultiplayerDataPacketArgs<'a> {
  #[inline]
  fn default() -> Self {
    MultiplayerDataPacketArgs {
      sender: 0,
      packet: None, // required field
    }
  }
}

pub struct MultiplayerDataPacketBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> MultiplayerDataPacketBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_sender(&mut self, sender: i32) {
    self.fbb_.push_slot::<i32>(MultiplayerDataPacket::VT_SENDER, sender, 0);
  }
  #[inline]
  pub fn add_packet(&mut self, packet: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MultiplayerDataPacket::VT_PACKET, packet);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> MultiplayerDataPacketBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    MultiplayerDataPacketBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<MultiplayerDataPacket<'a>> {
    let o = self.fbb_.end_table(self.start_);
    self.fbb_.required(o, MultiplayerDataPacket::VT_PACKET,"packet");
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for MultiplayerDataPacket<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("MultiplayerDataPacket");
      ds.field("sender", &self.sender());
      ds.field("packet", &self.packet());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `MultiplayerDataPacket`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_multiplayer_data_packet_unchecked`.
pub fn root_as_multiplayer_data_packet(buf: &[u8]) -> Result<MultiplayerDataPacket, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<MultiplayerDataPacket>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `MultiplayerDataPacket` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_multiplayer_data_packet_unchecked`.
pub fn size_prefixed_root_as_multiplayer_data_packet(buf: &[u8]) -> Result<MultiplayerDataPacket, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<MultiplayerDataPacket>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `MultiplayerDataPacket` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_multiplayer_data_packet_unchecked`.
pub fn root_as_multiplayer_data_packet_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<MultiplayerDataPacket<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<MultiplayerDataPacket<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `MultiplayerDataPacket` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_multiplayer_data_packet_unchecked`.
pub fn size_prefixed_root_as_multiplayer_data_packet_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<MultiplayerDataPacket<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<MultiplayerDataPacket<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a MultiplayerDataPacket and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `MultiplayerDataPacket`.
pub unsafe fn root_as_multiplayer_data_packet_unchecked(buf: &[u8]) -> MultiplayerDataPacket {
  flatbuffers::root_unchecked::<MultiplayerDataPacket>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed MultiplayerDataPacket and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `MultiplayerDataPacket`.
pub unsafe fn size_prefixed_root_as_multiplayer_data_packet_unchecked(buf: &[u8]) -> MultiplayerDataPacket {
  flatbuffers::size_prefixed_root_unchecked::<MultiplayerDataPacket>(buf)
}
#[inline]
pub fn finish_multiplayer_data_packet_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<MultiplayerDataPacket<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_multiplayer_data_packet_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<MultiplayerDataPacket<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
